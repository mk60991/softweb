# -*- coding: utf-8 -*-
"""HousePricePrediction_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mAt_-rSRy-kXM_NoyfHAepDUeFfVPNoU
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
# %matplotlib inline
import matplotlib 
matplotlib.rcParams["figure.figsize"] = (20,10)

df1 = pd.read_csv("Bengaluru_House_Data_main.csv") 
df2 = df1.drop(['area_type','society','balcony','availability'],axis='columns')
df3 = df2.dropna()
df3['bhk'] = df3['size'].apply(lambda x: int(x.split(' ')[0]))
df3.rename(columns={'bath': 'bathroom'}, inplace=True)

def is_float(x):
    try:
        float(x)
    except:
        return False
    return True

def convert_sqft_to_num(x):
    tokens = x.split('-')
    if len(tokens) == 2:
        return (float(tokens[0])+float(tokens[1]))/2
    try:
        return float(x)
    except:
        return None

df4 = df3.copy()
df4['total_sqft'] = df4['total_sqft'].apply(convert_sqft_to_num)
df4 = df4[df4.total_sqft.notnull()]
df5 = df4.copy()
df5['price_per_sqft'] = df5['price']*100000/df5['total_sqft']
df5.location = df5.location.apply(lambda x: x.strip())
location_stats = df5.groupby('location')['location'].agg('count').sort_values(ascending=False)
df5_stats = df5['price_per_sqft'].describe()
df5.location = df5.location.apply(lambda x: x.strip())
location_stats = df5['location'].value_counts(ascending=False)
location_stats_less_than_10 = location_stats[location_stats<=10]
df5.location = df5.location.apply(lambda x: 'other' if x in location_stats_less_than_10 else x)
df6 = df5[~(df5.total_sqft/df5.bhk<300)]

def remove_pps_outliers(df):
    df_out = pd.DataFrame()
    for key, subdf in df.groupby('location'):
        m = np.mean(subdf.price_per_sqft)
        st = np.std(subdf.price_per_sqft)
        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]
        df_out = pd.concat([df_out,reduced_df],ignore_index=True)
    return df_out
df7 = remove_pps_outliers(df6)

def remove_bhk_outliers(df):
    exclude_indices = np.array([])
    for location, location_df in df.groupby('location'):
        bhk_stats = {}
        for bhk, bhk_df in location_df.groupby('bhk'):
            bhk_stats[bhk] = {
                'mean': np.mean(bhk_df.price_per_sqft),
                'std': np.std(bhk_df.price_per_sqft),
                'count': bhk_df.shape[0]
            }
        for bhk, bhk_df in location_df.groupby('bhk'):
            stats = bhk_stats.get(bhk-1)
            if stats and stats['count']>5:
                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)
    return df.drop(exclude_indices,axis='index')
df8 = remove_bhk_outliers(df7)

df9 = df8[df8.bathroom<df8.bhk+2]
df10 = df9.drop(['size','price_per_sqft'],axis='columns')


df10.to_csv("house_price_test.csv", index=False)


dummies = pd.get_dummies(df10.location)
df11 = pd.concat([df10,dummies.drop('other',axis='columns')],axis='columns')
df12 = df11.drop('location',axis='columns')

"""# Build a model now"""

X = df12.drop(['price'],axis='columns')
y = df12.price

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=10)
lr_clf = LinearRegression()
lr_clf.fit(X_train,y_train)
lr_clf.score(X_test,y_test)

def predict_price(location,sqft,bath,bhk):    
    loc_index = np.where(X.columns==location)[0][0]

    x = np.zeros(len(X.columns))
    x[0] = sqft
    x[1] = bath
    x[2] = bhk
    if loc_index >= 0:
        x[loc_index] = 1
    p = lr_clf.predict([x])[0]
    currency = "â‚¹{:,.2f}".format(p)
    return currency

predict_price('1st Phase JP Nagar',1000, 2, 2)

predict_price('1st Phase JP Nagar',1000, 3, 3)

predict_price('Indira Nagar',1000, 2, 2)

predict_price('Kengeri',600, 1, 1)


#test manual
pred_ =lr_clf.predict(X_test)




#

df_ =pd.read_csv("house_price_test.csv")

a=list(df_.index)
p=np.random.choice(a, 20)

df_1 =df_.iloc[p, :]

df_2 =df_.iloc[p, :]

df_3 =df_.iloc[p, :]

df_1.to_csv("house_price15.1.csv", index=False)
df_2.to_csv("house_price15.2.csv", index=False)
df_3.to_csv("house_price20.3.csv", index=False)



dummies = pd.get_dummies(df_.location)
df__ = pd.concat([df_,dummies.drop('other',axis='columns')],axis='columns')
df___= df__.drop('location',axis='columns')

"""# Build a model now"""

X_ = df___.drop(['price'],axis='columns')
y_ = df___.price

#predict
pred_ = classifier.predict(X_)




import pickle
with open('House_prices_model.pickle','wb') as f:
    pickle.dump(lr_clf,f)

#test----------------------------------
import joblib
joblib.dump(lr_clf, 'House_prices_model.pkl')

classifier = joblib.load('House_prices_model.pkl')
